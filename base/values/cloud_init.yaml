################################################################################
#   ____ _                 _ ___       _ _
#  / ___| | ___  _   _  __| |_ _|_ __ (_) |_
# | |   | |/ _ \| | | |/ _` || || '_ \| | __|
# | |___| | (_) | |_| | (_| || || | | | | |_
#  \____|_|\___/ \__,_|\__,_|___|_| |_|_|\__|
################################################################################
# -- Enable or disable usage of cloud-init sub-chart
cloudinit:
  enabled: true
  # Not all cloud-init modules are currently supported
  # https://cloudinit.readthedocs.io/en/latest/reference/modules.html

  # -- name of secret in which to save the user-data file
  secret_name: base-user-data
  # -- image version
  image: deserializeme/kv-cloud-init:v0.0.1
  # -- Choose weather to create a service-account or not. Once a SA has been created
  # you should set this to false on subsequent runs.
  serviceAccount:
    create: true
    name: smol-os-base
    # Ignored is `create` set to true
    existingServiceAccountName: "smol-os-base"
  # -- Set up mount points. mounts contains a list of lists.
  # The inner list contains entries for an /etc/fstab line
  mounts: []
  # - [ /dev/vdb, /media, "ext4", "defaults,nofail,discard", "0", "0" ]

  # -- creates a swap file using human-readable values.
  swap:
    enabled: true
    filename: /swapfile
    size: 1G
    maxsize: 1G
  disk_setup: []
  # # -- The name of the device.
  # - name: /dev/vdb
  #   # -- This is a list of values, with the percentage of disk that
  #   # the partition will take. When layout is “true”, it instructs cloud-init
  #   # to single-partition the entire device. When layout is “false” it means
  #   # “don’t partition” or “ignore existing partitioning”.
  #   layout: true
  #   # -- “false” is the default which means that the device will be checked for
  #   # a partition table and/or filesystem. “true” is cowboy mode, no checks.
  #   overwrite: false
  #   # -- Supported options ate `gpt` and `mbr`
  #   table_type: 'gpt'

  fs_setup: []
  # # -- The device name.
  # - device: /dev/vdb
  #   # -- The filesystem type. Supports ext{2,3,4} and vfat
  #   filesystem: ext4
  #   # -- The filesystem label to be used. If set to “None”, no label is used.
  #   label: None
  #   # -- Options are `auto` or `any`
  #   partition: 'auto'

  # -- Dont recreate script configmap. Set to true when keeping multiple
  # cloud-init secrets in the same namespace
  existingConfigMap: false
  # -- Run envsubst against bootcmd and runcmd fields at the beginning of templating
  # Not an official part of cloid-init
  envsubst: true
  extraEnvVars:
    - name: USERNAME
      value: friend
  # -- virtual-machine hostname
  hostname: onboardme-base
  # -- namespace in which to create resources
  namespace: smol-os
  # -- Disable root login over ssh
  disable_root: false
  # -- when enabled job sleeps to allow user to exec into the container
  debug: false
  # -- salt used for password generation
  salt: "saltsaltlettuce"
  # -- networking options
  network:
    # --  disable cloud-init’s network configuration capability and rely on
    # other methods such as embedded configuration or other customisations.
    config: disabled
  # -- add wireguard configuration from existing secret or as plain-text
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#wireguard
  wireguard: []
  #  interfaces:
  #    - name: wg0
  #      config_path: /etc/wireguard/wg0.conf
  #      existingSecret:
  #        name: wg0-credentials
  #        key: wg0.conf

  # -- user configuration options
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#users-and-groups
  # do NOT use 'admin' as username - it conflicts with multiele cloud-images
  users:
    - name: friend
      groups: users, admin, docker, sudo, kvm, input
      sudo: ALL=(ALL) NOPASSWD:ALL
      shell: /bin/bash
      lock_passwd: false
      # -- set user password from existing secret or generate random
      password:
        random: false
        existingSecret:
          name: smol-os-credentials
          key: password

      # -- import user ssh public keys from github, gitlab, or launchpad
      # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#ssh
      ssh_import_id: []
      # -- provider user ssh pub key as plaintext
      ssh_authorized_keys: []
  # -- Add CA certificates
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#ca-certificates
  ca_certs: []
  #  remove_defaults: true
  #  trusted:
  #    - certificate

  # -- Run arbitrary commands early in the boot process
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#bootcmd
  boot_cmd: []
  # -- Write arbitrary files to disk.
  # Files my be provided as plain-text or downloaded from a url
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#write-files
  write_files:
    - path: /etc/apt/sources.list
      url: https://raw.githubusercontent.com/small-hack/smol-os/refs/heads/main/base/files/apt-sources.list
      permissions: '0644'
    - path: /etc/modprobe.d/nouveau.conf
      content: |-
        blacklist nouveau
      permissions: '0644'
    - path: /etc/default.locale
      url: https://raw.githubusercontent.com/small-hack/smol-metal/refs/heads/main/etc-default-locale
      permissions: '0644'
    - path: /etc/default/keyboard
      url: https://raw.githubusercontent.com/small-hack/smol-metal/refs/heads/main/etc-default-keyboard
      permissions: '0644'
    - path: /home/${USERNAME}/runner.sh
      url: https://raw.githubusercontent.com/small-hack/smol-metal/refs/heads/main/gha-runner.sh
      permissions: '0644'
    - path: /etc/netplan/99-config.yaml
      permissions: '0600'
      content: |-
        ---
        network:
          version: 2
          renderer: networkd
          ethernets:
            enp1s0:
              dhcp4: true
              mtu: 1500
    - path: /etc/nvidia/gridd.conf
      permissions: '0644'
      content: |-
        ServerAddress="https://vgpu.buildstars.online"
        ServerPort=443
        FeatureType=0
    - path: /etc/environment
      permissions: '0644'
      url: https://raw.githubusercontent.com/small-hack/smol-metal/refs/heads/main/environmment.txt
  # -- Update, upgrade, and install packages
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#package-update-upgrade-install
  package_reboot_if_required: true
  package_update: true
  package_upgrade: true
  packages:
    - wireguard
    - ssh-import-id
    - sudo
    - curl
    - tmux
    - netplan.io
    - apt-transport-https
    - ca-certificates
    - software-properties-common
    - htop
    - git-extras
    - rsyslog
    - vim
    - gpg
    - open-iscsi
    - nfs-common
    - ncdu
    - bc
    - zip
    - unzip
    - pkg-config
    - iotop
    - cron
    - pipx
    - qemu-guest-agent
    - nvtop
    - build-essential
    - dkms
    - mdevctl
    - firmware-misc-nonfree
    - linux-headers-amd64
    - gcc
    - make
    - libvulkan1
    - libglvnd-dev
    - uuid-runtime
    - pciutils
    - git
    - jq
  # -- Run arbitrary commands
  # See https://cloudinit.readthedocs.io/en/latest/reference/modules.html#runcmd
  runcmd:
    #####################
    # Apply netplan config
    - /usr/sbin/netplan --debug generate
    - /usr/sbin/netplan --debug apply
    - sleep 5
    - rm /etc/netplan/50*
    ######################
    # Install YQ
    - wget -nv https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    ######################
    # Install Docker
    - curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - sudo apt-get update
    - sudo apt-get install -y docker-ce
    ########################
    # Brew and Python3
    - wget -nv https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
    - chmod +x /install.sh
    - chmod 777 /install.sh
    - sudo chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}
    - su - ${USERNAME} -c "NONINTERACTIVE=1 /bin/bash /install.sh"
    - su - ${USERNAME} -c "/home/linuxbrew/.linuxbrew/bin/brew shellenv >> /home/${USERNAME}/.profile"
    - su - ${USERNAME} -c "/home/linuxbrew/.linuxbrew/bin/brew install python@3.12"
    - su - ${USERNAME} -c "/home/linuxbrew/.linuxbrew/opt/python@3.12/libexec/bin >> /home/${USERNAME}/.profile"
    - sudo cmod -R 0777 ${USERNAME}:${USERNAME} /home/linuxbrew
    - sudo -u ${USERNAME} -c "echo 'export PATH="$PATH:$HOME/.local/bin/"' >> /home/${USERNAME}/.profile"
    ######################
    # Nvidia Driver
    - sudo systemctl stop lightdm
    - sudo systemctl disable lightdm
    - wget -nv https://buildstars.online/guest/NVIDIA-Linux-x86_64-550.90.07-grid.run
    - sudo bash NVIDIA-Linux-x86_64-550.90.07-grid.run --compat32-prefix=/usr --compat32-libdir=lib32 --dkms --silent --install-compat32-libs --no-check-for-alternate-installs --no-backup
    - wget -nv --no-check-certificate -O /etc/nvidia/ClientConfigToken/client_configuration_token_$(date '+%d-%m-%Y-%H-%M-%S').tok https://vgpu.buildstars.online/-/client-token
    ######################
    # Nvidia Container Runtime
    - curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && curl -s -L https://nvidia.github.io/libnvidia-container/debian11/libnvidia-container.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    - sudo apt-get update
    - sudo apt-get install -y nvidia-container-toolkit
    - sudo nvidia-ctk runtime configure --runtime=docker
    - sudo systemctl restart docker
    #####################
    # Onboardme
    - sudo rm /usr/lib/python3.*/EXTERNALLY-MANAGED
    - su - ${USERNAME} -c "pipx install onboardme"
    - su - ${USERNAME} -c "/home/${USERNAME}/.local/bin/onboardme -O -s dot_files"
    - su - ${USERNAME} -c "source /etc/environment && /home/${USERNAME}/.local/bin/onboardme -O"
